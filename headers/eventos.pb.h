// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: eventos.proto

#ifndef PROTOBUF_eventos_2eproto__INCLUDED
#define PROTOBUF_eventos_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ce {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_eventos_2eproto();
void protobuf_AssignDesc_eventos_2eproto();
void protobuf_ShutdownFile_eventos_2eproto();

class Evento;

// ===================================================================

class Evento : public ::google::protobuf::Message {
 public:
  Evento();
  virtual ~Evento();

  Evento(const Evento& from);

  inline Evento& operator=(const Evento& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Evento& default_instance();

  void Swap(Evento* other);

  // implements Message ----------------------------------------------

  Evento* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Evento& from);
  void MergeFrom(const Evento& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string x = 3;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 3;
  inline const ::std::string& x() const;
  inline void set_x(const ::std::string& value);
  inline void set_x(const char* value);
  inline void set_x(const char* value, size_t size);
  inline ::std::string* mutable_x();
  inline ::std::string* release_x();
  inline void set_allocated_x(::std::string* x);

  // optional string y = 4;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 4;
  inline const ::std::string& y() const;
  inline void set_y(const ::std::string& value);
  inline void set_y(const char* value);
  inline void set_y(const char* value, size_t size);
  inline ::std::string* mutable_y();
  inline ::std::string* release_y();
  inline void set_allocated_y(::std::string* y);

  // @@protoc_insertion_point(class_scope:ce.Evento)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* type_;
  ::std::string* x_;
  ::std::string* y_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_eventos_2eproto();
  friend void protobuf_AssignDesc_eventos_2eproto();
  friend void protobuf_ShutdownFile_eventos_2eproto();

  void InitAsDefaultInstance();
  static Evento* default_instance_;
};
// ===================================================================


// ===================================================================

// Evento

// required string type = 1;
inline bool Evento::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Evento::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Evento::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Evento::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& Evento::type() const {
  return *type_;
}
inline void Evento::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void Evento::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void Evento::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Evento::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* Evento::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Evento::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 id = 2;
inline bool Evento::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Evento::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Evento::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Evento::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Evento::id() const {
  return id_;
}
inline void Evento::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string x = 3;
inline bool Evento::has_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Evento::set_has_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Evento::clear_has_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Evento::clear_x() {
  if (x_ != &::google::protobuf::internal::kEmptyString) {
    x_->clear();
  }
  clear_has_x();
}
inline const ::std::string& Evento::x() const {
  return *x_;
}
inline void Evento::set_x(const ::std::string& value) {
  set_has_x();
  if (x_ == &::google::protobuf::internal::kEmptyString) {
    x_ = new ::std::string;
  }
  x_->assign(value);
}
inline void Evento::set_x(const char* value) {
  set_has_x();
  if (x_ == &::google::protobuf::internal::kEmptyString) {
    x_ = new ::std::string;
  }
  x_->assign(value);
}
inline void Evento::set_x(const char* value, size_t size) {
  set_has_x();
  if (x_ == &::google::protobuf::internal::kEmptyString) {
    x_ = new ::std::string;
  }
  x_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Evento::mutable_x() {
  set_has_x();
  if (x_ == &::google::protobuf::internal::kEmptyString) {
    x_ = new ::std::string;
  }
  return x_;
}
inline ::std::string* Evento::release_x() {
  clear_has_x();
  if (x_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = x_;
    x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Evento::set_allocated_x(::std::string* x) {
  if (x_ != &::google::protobuf::internal::kEmptyString) {
    delete x_;
  }
  if (x) {
    set_has_x();
    x_ = x;
  } else {
    clear_has_x();
    x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string y = 4;
inline bool Evento::has_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Evento::set_has_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Evento::clear_has_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Evento::clear_y() {
  if (y_ != &::google::protobuf::internal::kEmptyString) {
    y_->clear();
  }
  clear_has_y();
}
inline const ::std::string& Evento::y() const {
  return *y_;
}
inline void Evento::set_y(const ::std::string& value) {
  set_has_y();
  if (y_ == &::google::protobuf::internal::kEmptyString) {
    y_ = new ::std::string;
  }
  y_->assign(value);
}
inline void Evento::set_y(const char* value) {
  set_has_y();
  if (y_ == &::google::protobuf::internal::kEmptyString) {
    y_ = new ::std::string;
  }
  y_->assign(value);
}
inline void Evento::set_y(const char* value, size_t size) {
  set_has_y();
  if (y_ == &::google::protobuf::internal::kEmptyString) {
    y_ = new ::std::string;
  }
  y_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Evento::mutable_y() {
  set_has_y();
  if (y_ == &::google::protobuf::internal::kEmptyString) {
    y_ = new ::std::string;
  }
  return y_;
}
inline ::std::string* Evento::release_y() {
  clear_has_y();
  if (y_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = y_;
    y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Evento::set_allocated_y(::std::string* y) {
  if (y_ != &::google::protobuf::internal::kEmptyString) {
    delete y_;
  }
  if (y) {
    set_has_y();
    y_ = y;
  } else {
    clear_has_y();
    y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ce

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_eventos_2eproto__INCLUDED
